<?xml version="1.0" encoding="UTF-8" ?>
<!-- mapper DTD 선언 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.latte.article.repository.CommentMapper">

    <!--댓글 정렬-->
    <sql id="sort">
        <choose>
            <!-- 최신순 -->
            <when test="sort == null or sort  == '' or sort == 'recent'">
                ORDER BY C.comment_no, C.reg_date ASC
            </when>
            <!-- 좋아요순 -->
            <when test="sort == 'likeCnt'">
                ORDER BY C.like_cnt DESC
            </when>
        </choose>
    </sql>

    <!-- comment 테이블 전체 컬럼 -->
    <sql id="commentColumns">
            comment_no
            , article_no
            , content
            , like_cnt
            , writer_no
            , delete_yn
            , report_count
            , reg_date
            , update_date
    </sql>


    <!-- 댓글 저장 -->
    <insert id="save" parameterType="com.latte.article.request.CommentRequest" useGeneratedKeys="true" keyProperty="commentNo">
        INSERT INTO COMMENT (
        <include refid="commentColumns" />
        ) VALUES (
         #{commentNo}
        , #{articleNo}
        , #{content}
        , #{likeCnt}
        , #{writerNo}
        , 'N'
        , 0
        , NOW()
        , NULL
        )
    </insert>


    <!-- 댓글 상세정보 조회 -->
    <select id="detailComment" parameterType="int" resultType="com.latte.article.response.CommentResponse">
        /* CommentMapper.detailComment */
        SELECT
        <include refid="commentColumns" />
        FROM
        COMMENT
        WHERE comment_no = #{commentNo}
    </select>


    <!-- 댓글 수정 -->
    <update id="update" parameterType="com.latte.article.request.CommentRequest">
        /* CommentMapper.update */
        UPDATE COMMENT
        SET
            update_date = NOW()
          , content = #{content}
        WHERE
            comment_no = #{commentNo}
    </update>


    <!-- 댓글 삭제 -->
    <delete id="deleteByComment" parameterType="int">
        /* CommentMapper.deleteByComment */
        UPDATE COMMENT
        SET
            delete_yn = 'Y'
        WHERE
            comment_no = #{commentNo}
    </delete>


    <!-- 댓글 리스트 조회(아티클) -->
    <select id="findAll" parameterType="int" resultType="com.latte.article.response.CommentResponse">
        /* CommentMapper.findAll */
        SELECT
        <include refid="commentColumns" />
        FROM COMMENT
        WHERE delete_yn = 'N'
            AND article_no = #{articleNo}
        ORDER BY comment_no ASC
    </select>


    <!-- 댓글 리스트 조회(유저별) -->
    <select id="commentListByMember" resultType="com.latte.article.response.CommentResponse">
        /* CommentMapper.commentListByMember */
        SELECT
                C.content
             , A.title
             , C.like_cnt
             , C.reg_date
             , C.update_date
        FROM COMMENT C LEFT JOIN ARTICLE A ON C.article_no = A.article_no
        WHERE C.delete_yn = 'N'
        AND C.writer_no = #{writerNo}
        <include refid="sort" />
    </select>

    <!-- 작성자 확인 여부 -->
    <select id="isCommentAuthor" parameterType="int" resultType="int">
        /* CommentMapper.isCommentAuthor */
        SELECT
            COUNT(*)
        FROM
            COMMENT
        WHERE
            `comment_no` = #{commentNo}
          AND `writer_no` = #{writerNo}
    </select>

    <!--전체 댓글 수(유저)-->
    <select id="userCommentCount" resultType="Integer" parameterType="int">
        SELECT COUNT(*)
        FROM COMMENT
        WHERE writer_no = #{writerNo}
    </select>

    <!--댓글 신고 증가-->
    <update id="reportCount">
        UPDATE COMMENT
        SET report_count = report_count + 1
        WHERE `comment_no`=#{commentNo}
    </update>

    <!--좋아요 추가-->
    <insert id="likeCount">
        INSERT INTO COMMENT_LIKE (
                                   comment_no
                                 , article_no
                                 , reg_no
                                 , reg_date
        ) VALUES (
                   #{commentNo}
                 , #{articleNo}
                 , #{regNo}
                 , NOW()
                 )
    </insert>

    <!--좋아요 삭제-->
    <delete id="unlikeCount" parameterType="int">
        DELETE FROM COMMENT_LIKE
        WHERE co_like_no = #{coLikeNo}
    </delete>

    <!--댓글 테이블 좋아요 수정-->
    <update id="updateCommentLike"  parameterType="int">
        UPDATE COMMENT
        SET
            like_cnt = (SELECT COUNT(*)
                        FROM COMMENT_LIKE
                        WHERE comment_no = #{commentNo})
        WHERE comment_no = #{commentNo}
    </update>


    <!--등록자 좋아요-->
    <select id="findLikeByCommentRegNo" parameterType="int" resultType="Integer">
        SELECT co_like_no
        FROM COMMENT_LIKE
        WHERE comment_no = #{commentNo}
          AND reg_no = #{regNo}
    </select>



</mapper>